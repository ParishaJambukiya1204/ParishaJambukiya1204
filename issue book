using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data;
using System.Data.SqlClient;

namespace WindowsFormsApplication1
{
    public partial class Issue_Books : UserControl
    {
        SqlConnection connect = new SqlConnection(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\2252\WindowsFormsApplication1\lms.mdf;Integrated Security=True;Connect Timeout=30");
        private SqlCommand cmd;
       

        public Issue_Books()
        {
            InitializeComponent();

            DataBookTitle();
            displayBookIssueData();

        }



        public void refreshData()
        {
            if (InvokeRequired)
            {
                Invoke((MethodInvoker)refreshData);
                return;
            }
            displayBookIssueData();
            DataBookTitle();
        }


        public void displayBookIssueData()
        {
            DataIssueBook dib = new DataIssueBook();
            List<DataIssueBook> listData = dib.IssueBookData();

            dataGridView1.DataSource = listData;
        }

        private void bookIssue_addbtn_Click(object sender, EventArgs e)
        {
            if (bookIssue_id.Text == ""
                || bookIssue_name.Text == ""
                || bookIssue_contact.Text == ""
                || bookIssue_email.Text == ""
                || bookIssue_bookTitle.Text == ""
                || bookIssue_author.Text == ""
                || bookIssue_issueDate.Text == ""
                || bookIssue_returnDate.Text == ""
                || bookIssue_status.Text == ""
                || bookIssue_picture.Image == null)

            {
                MessageBox.Show("Please fill all the blank fields", "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            // Validate email
            if (!IsValidEmail(bookIssue_email.Text.Trim()))
            {
                MessageBox.Show("Please enter a valid email address.", "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Validate mobile number
            if (!IsValidMobileNumber(bookIssue_contact.Text.Trim()))
            {
                MessageBox.Show("Please enter a valid mobile number.", "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Check for duplicate issue ID
            if (IsDuplicateIssueID(bookIssue_id.Text.Trim()))
            {
                MessageBox.Show("This issue ID already exists.", "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            else
            {
                if (connect.State != ConnectionState.Open)
                {
                    try
                    {
                        DateTime today = DateTime.Today;
                        connect.Open();

                        
                        string insertData = "insert into issue" + "(issue_id,full_name,contact,email,book_title,author,status,issue_date,return_date,date_insert)" +
                            " values(@issueID,@full_name,@contact,@email,@bookTitle,@author" +
                            ",@status,@issueDate,@returnDate,@dataInsert)";

                        using (SqlCommand cmd = new SqlCommand(insertData, connect))
                        {
                            cmd.Parameters.AddWithValue("@issueID", bookIssue_id.Text.Trim());
                            cmd.Parameters.AddWithValue("@full_name", bookIssue_name.Text.Trim());
                            cmd.Parameters.AddWithValue("@contact", bookIssue_contact.Text.Trim());
                            cmd.Parameters.AddWithValue("@email", bookIssue_email.Text.Trim());
                            cmd.Parameters.AddWithValue("@bookTitle", bookIssue_bookTitle.Text.Trim());
                            cmd.Parameters.AddWithValue("@author", bookIssue_author.Text.Trim());
                            cmd.Parameters.AddWithValue("@status", bookIssue_status.Text.Trim());
                            cmd.Parameters.AddWithValue("@issueDate", bookIssue_issueDate.Value);
                            cmd.Parameters.AddWithValue("@returnDate", bookIssue_returnDate.Value);
                            cmd.Parameters.AddWithValue("@dataInsert", today);

                            cmd.ExecuteNonQuery();

                            displayBookIssueData();

                            MessageBox.Show("Issued successfully!", "Information Message", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            clearFields();
                        }

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error:" + ex, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        connect.Close();
                    }
          }
      }
  }

        private bool IsDuplicateIssueID(string issueID)
        {
            string query = "SELECT COUNT(*) FROM issue WHERE issue_id = @issueId";

            using (SqlConnection connection = new SqlConnection(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\2252\WindowsFormsApplication1\lms.mdf;Integrated Security=True;Connect Timeout=30"))
            {
                using (SqlCommand cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@issueId", issueID);
                    connection.Open(); // Open the connection here

                    int count = (int)cmd.ExecuteScalar();
                    return count > 0;
                }
            }
        }



        private bool IsValidMobileNumber(string number)
        {
            return System.Text.RegularExpressions.Regex.IsMatch(number, @"^\d{10}$");
        }

        private bool IsValidEmail(string email)
        {
            try
            {
                var mailAddress = new MailAddress(email);
                return mailAddress.Address == email;
            }
            catch
            {
                return false;
            }
        }

        public void clearFields()
        {
            bookIssue_id.Text = "";
            bookIssue_name.Text = "";
            bookIssue_contact.Text = "";
            bookIssue_email.Text = "";
            bookIssue_bookTitle.SelectedIndex = -1;
            bookIssue_author.SelectedIndex = -1;
            bookIssue_status.SelectedIndex = -1;
            bookIssue_picture.Image =null;

        }

        public void DataBookTitle()
        {
            if (connect.State == ConnectionState.Closed)
            {
                try
                {
                    connect.Open();
                    string selectData = "select id,book_title from books where status='Available' and date_delete is null";

                    using (SqlCommand cmd = new SqlCommand(selectData, connect))
                    {
                        SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                        DataTable table = new DataTable();
                        adapter.Fill(table);
                        bookIssue_bookTitle.DataSource = table;
                        bookIssue_bookTitle.DisplayMember = "book_title";
                        bookIssue_bookTitle.ValueMember = "id";
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error:" + ex, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    connect.Close();

                }
            }
        }

        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                DataGridViewRow row = dataGridView1.Rows[e.RowIndex];

                // Use null-coalescing operator to handle potential null values
                bookIssue_id.Text = row.Cells[1].Value?.ToString() ?? string.Empty;
                bookIssue_name.Text = row.Cells[2].Value?.ToString() ?? string.Empty;
                bookIssue_contact.Text = row.Cells[3].Value?.ToString() ?? string.Empty;
                bookIssue_email.Text = row.Cells[4].Value?.ToString() ?? string.Empty;
                bookIssue_bookTitle.Text = row.Cells[5].Value?.ToString() ?? string.Empty;
                bookIssue_author.Text = row.Cells[6].Value?.ToString() ?? string.Empty;
                bookIssue_issueDate.Value = row.Cells[8].Value != DBNull.Value ? (DateTime)row.Cells[8].Value : DateTime.Now; // Set to default DateTime if null
                bookIssue_returnDate.Value = row.Cells[9].Value != DBNull.Value ? (DateTime)row.Cells[9].Value : DateTime.Now; // Set to default DateTime if null
                bookIssue_status.Text = row.Cells[10].Value?.ToString() ?? string.Empty;
            }
        }

        private void bookIssue_update_Click(object sender, EventArgs e)
        {
            if (bookIssue_id.Text == ""
                  || bookIssue_name.Text == ""
                  || bookIssue_contact.Text == ""
                  || bookIssue_email.Text == ""
                  || bookIssue_bookTitle.Text == ""             
                  || bookIssue_author.Text == ""
                  || bookIssue_issueDate.Text ==null
                  || bookIssue_returnDate.Text == null
                  || bookIssue_status.Text == ""
                  || bookIssue_picture.Image == null)
            {
                MessageBox.Show("please select item first", "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (connect.State != ConnectionState.Open)
                {
                    DialogResult check = MessageBox.Show("Are you sure you want to update issue id:" + bookIssue_id + "?", "Confirmation Message", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (check == DialogResult.Yes)
                    {
                        try
                        {
                            connect.Open();
                            DateTime today = DateTime.Today;
                            string updateData = "update issue set full_name=@fullname, contact=@contact, email=@email, book_title=@bookTitle, author=@author, status=@status, issue_date=@issueDate, return_date=@returnDate, date_update=@dateUpdate where issue_id=@issueId";
                            using (SqlCommand cmd = new SqlCommand(updateData, connect))
                            {
                                cmd.Parameters.AddWithValue("@fullname", bookIssue_name.Text.Trim());
                                cmd.Parameters.AddWithValue("@contact", bookIssue_contact.Text.Trim());
                                cmd.Parameters.AddWithValue("@email", bookIssue_email.Text.Trim());
                                cmd.Parameters.AddWithValue("@bookTitle", bookIssue_bookTitle.Text.Trim());                                                            
                                cmd.Parameters.AddWithValue("@author", bookIssue_author.Text.Trim());
                                cmd.Parameters.AddWithValue("@status", bookIssue_status.Text.Trim());
                                cmd.Parameters.AddWithValue("@issueDate", bookIssue_issueDate.Value);
                                cmd.Parameters.AddWithValue("@returnDate", bookIssue_returnDate.Value);
                                cmd.Parameters.AddWithValue("@dateUpdate", today);
                                cmd.Parameters.AddWithValue("@issueId", bookIssue_id.Text.Trim());

                                cmd.ExecuteNonQuery();

                                displayBookIssueData();

                                MessageBox.Show("Update successfully!", "Information Message", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                clearFields();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error:" + ex, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        finally
                        {
                            connect.Close();
                        }
                    }
                    else
                    {
                        MessageBox.Show("cancelled.", "information message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }
        }

        private void bookIssue_deletebtn_Click(object sender, EventArgs e)
        {
            if (bookIssue_id.Text == ""
                  || bookIssue_name.Text == ""
                  || bookIssue_contact.Text == ""
                  || bookIssue_email.Text == ""
                 || bookIssue_bookTitle.Text == ""
                  || bookIssue_author.Text == ""
                  || bookIssue_issueDate.Text == ""
                  || bookIssue_returnDate.Text == ""
                  || bookIssue_status.Text == ""
                  || bookIssue_picture.Image == null)
            {
                MessageBox.Show("please select item first", "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (connect.State != ConnectionState.Open)
                {
                    DialogResult check = MessageBox.Show("Are you sure you want to delete issue id:" + bookIssue_id.Text.Trim() + "?", "Confirmation Message", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (check == DialogResult.Yes)
                    {
                        try
                        {
                            connect.Open();
                            DateTime today = DateTime.Today;
                            string updateData = "update issue set date_delete=@datedelete where issue_id=@issueId";
                            using (SqlCommand cmd = new SqlCommand(updateData, connect))
                            {
                                cmd.Parameters.AddWithValue(@"datedelete", today);
                                cmd.Parameters.AddWithValue(@"issueId", bookIssue_id.Text.Trim());


                                cmd.ExecuteNonQuery();

                                displayBookIssueData();

                                MessageBox.Show("Delete successfully!", "Information Message", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                clearFields();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error:" + ex, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        finally
                        {
                            connect.Close();
                        }
                    }
                    else
                    {
                        MessageBox.Show("cancelled.", "information message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }
        }

        private void bookIssue_bookTitle_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (connect.State != ConnectionState.Open)
            {
                if (bookIssue_bookTitle.SelectedValue != null)
                {
                    DataRowView selectRow = (DataRowView)bookIssue_bookTitle.SelectedItem;
                    int selectID = Convert.ToInt32(selectRow["id"]);

                    try
                    {
                        connect.Open();
                        string selectData = "select*from books where id=@id";
                        using (SqlCommand cmd = new SqlCommand(selectData, connect))
                        {
                            cmd.Parameters.AddWithValue("@id", selectID);

                            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                            DataTable table = new DataTable();
                            adapter.Fill(table);

                            if (table.Rows.Count > 0)
                            {
                                bookIssue_author.Text = table.Rows[0]["author"].ToString();
                                string imagePath = table.Rows[0]["image"].ToString();
                                if (imagePath != null)
                                {
                                    bookIssue_picture.Image = Image.FromFile(imagePath);
                                }
                                else
                                {
                                    bookIssue_picture.Image = null;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error:" + ex, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        connect.Close();
                    }
                }
            }
        }

        private void bookIssue_clearbtn_Click(object sender, EventArgs e)
        {
            clearFields();
        }
    }
}





